#!/usr/bin/env bash

# le: a simple terminal line editor written in bash.
# Created by Chris IÃ±igo <https://github.com/x1nigo>

create_file() {
	[[ -z "$1" ]] && return
	file_name="$1" && echo "\`$file_name\`"
	while IFS= read -r line; do
		full_input+=("$line")
	done < "$file_name"
}

# Command mode. Enter a command to interact with
# the script properly.
cmd_mode() {
	read cmd
	case "$cmd" in
		q) exit ;;
		a) append ;;
		i) insert_mode ;;
		d) delete ;;
		e) edit ;;
		h) hints ;;
		w) write ;;
		p) print_text ;;
		n) numbered_text ;;
		*) echo "Unknown command. Enter \`h\` to display keybindings." ;; # This can't really be seen (screen refreshes).
	esac
}

# Add a specified line
append() {
	read spec_line
	start=$spec_line
	for ((;;)) {
		IFS= read -r edited_spec_line
		case "$edited_spec_line" in
			";" ) break ;;
			*)
				for ((i=0;i<${#full_input[@]};i++)) {
					if [[ $i == $start ]]; then
						new_full_input+=("$edited_spec_line")
						new_full_input+=("${full_input[i]}")
					else
						new_full_input+=("${full_input[i]}")
					fi
				}
				full_input=()
				for line in "${new_full_input[@]}"; do
					full_input+=("$line")
				done
				new_full_input=()
				((start++))
				;;
		esac
	}
}

# Delete a line.
delete() {
	read line_num
	unset 'full_input[$line_num]'
	# Rebuild the array to fix missing indices.
	for i in "${!full_input[@]}"; do
		tmp_array+=("${full_input[i]}")
	done
	full_input=("${tmp_array[@]}")
	unset tmp_array
}

# Print the contents of a file.
print_text() {
	printf "\e[1;3;33m%s\e[m\n" "EOF >>"
	for line in "${full_input[@]}"; do
		printf "%s\n" "$line"
	done
	printf "\e[1;3;33m%s\e[m\n" "<< EOF"
}

# Print the numbered contents of a file.
numbered_text() {
	total=${#full_input[@]}
	case 1 in
		$((total >= 1000)) ) num_dist="%4d" ;;
		$((total >= 100)) ) num_dist="%3d" ;;
		$((total >= 10)) ) num_dist="%2d" ;;
		$((total >= 1)) ) num_dist="%d" ;;
	esac
	printf "\e[1;3;33m%s\e[m\n" "EOF >>"
	for ((i=0;i<${#full_input[@]};i++)) {
		printf "\e[1;30m$num_dist\e[m\t\t%s\n" "$i" "${full_input[i]}"
	}
	printf "\e[1;3;33m%s\e[m\n" "<< EOF"
}

# Save your file.
write() {
	[[ -z "$file_name" ]] && printf "%s" "[Saving file...] File name: " && \
		read -r file_name
	printf "%s\n" "${full_input[@]}" > "$file_name"
	echo "File \`$file_name\` written."
}

# Edit a specific line.
edit() {
	read line_number
	printf "%s\n" "\"${full_input[$line_number]}\""
	IFS= read -r edited_line
	full_input[$line_number]="$edited_line"

}

# Insert mode. This is where you'll be writing text for your file/s.
insert_mode() {
	for ((;;)); {
		# Read input line without changing anything.
		IFS= read -r input
		case "$input" in
			";" ) break ;;
			*) full_input+=("$input")
		esac
	}
}

# Keybindings for the unaware
hints() { cat << EOF
Keybindings:

q	quit
a	append line[s]
w	save [write]
d	delete line
e	edit line
i	insert mode
h	hints
p	print text
n	print numbered text
.	return to command mode

EOF
}

# The main function.
main() {
	create_file "$1"
	# Infinite loop
	for ((;;)); {
		cmd_mode
	}
}

main "$1"
